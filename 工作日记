七月第一周
2016-07-07
1.采购入库单分页有问题,搜索没有完善,采购入库的更新主从表条件需要完善(后台已写,但是还有问题)
2.需要完善根据已入库产品验收入库根据item_id去除重复记录
3.生成采购退货单时候,不能插入采购单号(自己写的关联查询已发货采购订单,
没有用采购订单视图,方便未完全入库时候更新产品单价,折扣,入库仓位)
4.单号的生成规则:相同供应商生成同一个单号,不同供应商生成不同单号
5.修改入库逻辑,根据item_id,st_auto_no
2016-07-08
1.解决了采购入库时候产生多条记录的情况,原因:已入库产品视图和采购从表的关联缺少连接字段item_id
2.解决了采购产品部分入库剩余订单产品数据影响其他订单的情况,原因:已发货产品视图和采购入库从表缺少连接字段item_id
3.调整了采购退货的退货单生成逻辑,如果退货产品已经入库完成,则更新采购订单从表m_flag='4',已发货;
更新入库数量,生成采购退货单,如果退货数量大于等于入库数量则根据入库单号删除该产品的入库记录;调用存储过程更新库存信息
4.测试入库,退货各种情况是否有问题

七月第二周
2016-07-11
1.调整入库,退货的模块权限;调整日期显示精确到时分秒
2.新增直接下订单的页面,并做相应JS和后台调整
2016-07-12
1.已下采购订单新增删除功能,调整已下采购订单数据来源
2.测试下单,入库,退货的数据流程准确性
3.完善入库,退货的后台逻辑(主要是单号带来的一些bug)
2016-07-13
1.增加入账成功后的状态显示,已入账
2.调整采购订单跟踪表页面布局,和数据展示
3.调整分页和搜索
2016-07-14
eclipse中解决搜狗输入法冲突Alt+Shift键
常用快捷键
 ctrl + shift + L:查看快捷键列表的快捷键
 ctrl+1:快速修复
 ctrl+H:搜索视图
 ctrl+F7:在代码中查看控制台视图
 ctrl+3:快速访问
 ctrl+shift+R：查找项目资源
 ctrl+O：列出当前类中的所有方法及属性
 ctrl+E：快速转换编辑器
 ctrl+L:调整到文件中的特定行
 ctrl + shift + F6:编辑页面编辑页之间切换的快捷键
 ctrl+2,L：为本地变量赋值
 ctrl+M:编辑器窗口最大化
 ctrl+K:选中某个文件的某些字符串时,使用ctrl+K向下寻找相同的字符串
 ctrl+shift+K:向上寻找相同的字符串
 ctrl+shift+P:根据左大括号找到右大括号
 ctrl+F8:eclipse右上角的resouce，debug,java等的切换 
 ctrl+T:查看一个类的继承关系树，是自顶向下的，再多按一次Ctrl+T, 会换成自底向上的显示结构。
 ctrl+shift+O:导入包
 ctrl+shift+F:代码格式化
 ctrl+shift+G:找出调用某个方法的所有类
 ctrl+shift+,:显示html和xml元素的所有可用属性
 ctrl+alt+H:显示当前方法调用的树形结构
 alt+shift+R：重命名
 alt+shift+M:抽取方法

1.调整下单,入库,退货的分页和搜索;退货的后台逻辑,取消入库产品来源显示
(退货数量大于等于入库数量即删除从表信息,然后判断是否还有相同单号存在,不存在即可删除主表对应信息)
2.完成采购订单跟踪表的开发
3.采购付款报表的开发,看是否需要调整采购付款单
2016/7/15
1.Maven工程学习(白县百团后台,51后台接口),项目构建,打包,项目依赖,自动生成帮助文档
2.RestFul后台接口架构模式学习(主要是RequestMapping属性了解,请求类型,请求数据类型,消息头
必须包含的信息,怎么用名词抽象所有资源)
3.spring事务管理(Transactional注解位置,接口,接口方法不推荐,类,类方法)
4.Apache shiro安全框架了解
5.log4j日志记录组件配置学习

2016/7/16
数据库学习,亚马逊买了三本电子书([深入理解java虚拟机,github入门与实践,java rest web service实战)
2016/7/17
1.spring rest学习,编程思想第九章接口学习
RestTemplate的getForObject完成get请求、postForObject完成post请求、put对应的完成put请求、delete完成delete请求；
还有execute可以执行任何请求的方法，需要你设置RequestMethod来指定当前请求类型。
RestTemplate.getForObject(String url, Class responseType, String... urlVariables)
参数url是http请求的地址，参数Class是请求响应返回后的数据的类型，最后一个参数是请求中需要设置的参数
2.理清采购订单跟踪表,采购付款单,采购明细表的开发思路

七月第三周
2016-07-18
工作:
1.采购付款报表开发
2.采购付款单调整,选择采购单号录入付款信息
学习:
1.大型网站架构的演化阅读第一章
2.String类常用API,常用IO
2016-07-19
工作:
1.采购付款单代码优化,页面新增根据采购订单号自动计算本单应付金额
2.调整采购付款报表,完善查看凭证,并且打印凭证
3.应付明细账模块开发
学习:
1.java数组常用方法,java容器常用方法(iterator和增强型for循环使用区别),java日期类常用方法(Date和Calendar)
2.线程的两种创建方式,继承Thread和实现Runnable接口,常用第二种,因为线程池可以有效的管理实现了Runnable接口
的线程,如果线程池满了,新的线程就会排队等候执行
3.jquery打印插件jquery.jqprint.js (实现方法:$().jqprint())
4.SqlServer数据库存储过程类型,返回参数类型,游标,触发器的简单学习了解
2016-07-20
工作:
1.完成应付明细账的开发,进入采购明细账的开发
2.采购退货,插入主表数据逻辑需要调整
学习:
1.tomcat热部署的方法:
    直接将tomcat的Context指向工程目录下的WebRoot/WebContent
    <Host appBase="webapps" autoDeploy="true" name="localhost" unpackWARs="true" xmlNamespaceAware="false" xmlValidation="false">  
       <!-- docBase指向工程目录  path即Context名称 -->  
       <Context docBase="E:/code/workspace/SCM/WebRoot" path="/SCM" reloadable="false">  
       </Context>  
    </Host> 
问题:
    很多项目引用的第三方包有统一的位置,并不直接放在工程下/WebContent/WEB-INF/lib下。
在这种场景，将会导致ClassNotFoundException异常抛出。
改善方法:
    利用Tomcat配置的VirtualWebappLoader机制，告诉tomcat去加载第三方的其他jar文件。
配置方法同样在server.xml文件里。在前面加的Context下添加Loade
    <Context docBase="E:/code/workspace/SCM/WebRoot" path="/SCM" reloadable="false">
	<Loader className="org.apache.catalina.loader.VirtualWebappLoader" searchVirtualFirst="false" 
	  virtualClasspath="E:/code/workspace/SimpleLibs/libs/*.jar">
	</Loader>  
    </Context>  

2.拦截器和过滤器的区别(均常用于解决乱码,权限验证)
拦截器是基于java的反射机制的，而过滤器是基于函数回调。(最本质的区别)
拦截器不依赖与servlet容器，过滤器依赖与servlet容器。
拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。
拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。
在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。
拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。
Filter的过滤范围比Interceptor大,Filter除了过滤请求外通过通配符可以保护页面，图片，文件等等，而Interceptor只能过滤请求

3.由于Sql中经常有与xml规范相冲突的字符对xml映射文件的合法性造成影响,所以mybatis用 <![CDATA[]]>标签避免冲突
4.jQuery ajax学习

2016-07-21
工作:
1.调整采购付款报表的日期搜索,采购订单的查询条件搜索
2.应付明细账传递参数调用存储过程无返回结果集,需要重写SQL语句查询数据,并调整查询条件
3.调整采购退货的后台逻辑,生成退货主表数据根据供应商来进行控制
4.开发应付总账
学习:
1.学习常用的排序算法(快排,递归,归并,希尔)和了解JAVA多线程的运行机制
2.jquery常用方法

2016-07-22
工作:
1.自写SQL入账更新库存,调整退货生成主表数据信息
2.优化代码
学习:
alt+t:快速启动tomcat

七月第四周
2016-07-25
工作:
1.优化期初维护模块代码,调整期初库存报表查询条件,SQL代码
2.调整期末库存查询代码
3.优化入库逻辑
学习:
1.jquery常用API
2016-07-26
工作:
完善采购退货主表数据生成逻辑,自写SQL更新库存,调整已入库产品的查询条件
学习:
1.函数式编程学习了解
2.spring boot微服务框架了解
微服务架构的优缺点:

2016-07-27
工作:
测试采购子系统的业务逻辑,验证数据准确性,优化代码
学习:
jquery编码规范,java编码规范.数据库设计规范
2016-07-28
工作:
1.解决未完全收货的入库问题,分页bug,报表折扣字段显示
学习:
1.javascript基本类型的常用API,SQL编写规范
八月第一周
2016-08-01
工作:
优化采购子系统代码,报表部分SQL修改
学习:
Spring MVC
2016-08-02
工作:
调整采购明细表的SQL,采购入库逻辑验证,付款界面新增显示该笔订单付款金额显示
学习:
1.Spring
2.开源Comet框架:Pushlet 


[我要预约]开发设计
2016-08-04
1.客户在店面扫描商家提供的二维码,后台跳转到客户注册页面并携带图形验证码信息
填写到注册页面的验证码隐藏域,客户输入手机号系统后台进行检测该手机号是否存在
,存在直接跳转到登录界面.不存在,点击获取短信验证码,此时系统后台验证图形验证码是否
正确,正确则发送验证码给客户手机,输入验证码,如果客户没有输入密码,则给予安全提醒,但不作强制
要求,提交注册信息,注册成功跳转回登录页面
2.登录成功后进行预约界面,系统后台根据客户ID,自动获取客户信息,已注册店铺信息
(默认选择第一家店铺),切换店铺,自动获取当前店铺信息;(关联查询)
3.选择店铺,预约服务,技师,预约时间,提交预约信息,等待商家反馈(插入表)
4.消息页面可以查看预约结果(查询表)
5.个人信息界面点击头像,上传图片保存到本地,输入昵称,性别保存客户信息(插入表)
2016-08-05
